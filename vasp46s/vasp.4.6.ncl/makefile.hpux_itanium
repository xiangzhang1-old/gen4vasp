.SUFFIXES: .inc .f .F .f90
#-----------------------------------------------------------------------
# Makefile for HPUX Itanium platorm
#  written by F. Mittendorfer and G. Kresse
#
# Makefile was tested for f90 V2.7.4 only
#-----------------------------------------------------------------------

# all CPP processed fortran files have the extension .f90
SUFFIX=.f90

#-----------------------------------------------------------------------
# fortran compiler and linker
#-----------------------------------------------------------------------
FC=f90
FCL=$(FC)

#-----------------------------------------------------------------------
# possible options for CPP:
# NGXhalf             charge density   reduced in X direction
# wNGXhalf            gamma point only reduced in X direction
# avoidalloc          avoid ALLOCATE if possible
# IFC                 work around some IFC bugs
# CACHE_SIZE          required for fft3dlinb of Juergen Furthmueller
# RPROMU_DGEMV        use DGEMV instead of DGEMM in RPRO
# RACCMU_DGEMV        use DGEMV instead of DGEMM in RACC (faster on P4)
#-----------------------------------------------------------------------

CPP     = ./preprocess <$*.F >$*$(SUFFIX)
CPPFLG=  +cpp=yes -DHOST=\"HPUX_Itanium2\" \
     -Dkind8 -DNGXhalf -DCACHE_SIZE=16000

#-----------------------------------------------------------------------
# general fortran flags  (there must a trailing blank on this line)
#-----------------------------------------------------------------------
ARCH  = +DD64  +DSnative 
# cpp is done by f90
FFLAGS =   $(CPPFLG) $(ARCH) 

#-----------------------------------------------------------------------
# optimization
# lots of options are possible, but +O3 seems to be a reasonable 
# compromise
# profiling: +Oprofile=use  +Oprofile=collect
# other options:
#     +DD64 +DSitanium2 +O3 +Ofltacc=relaxed +Oinitcheck +FPD -Wl,+pd1M 
#-----------------------------------------------------------------------
OFLAG = +O3

OFLAG_HIGH = +O3 +Ofast 
OBJ_HIGH =   hamil.o rmm-diis.o nonlr.o dfast.o $(FFT3D)

OBJ_NOOPT =  steep.o
DEBUG  = -g
INCS   =  -I/opt/mpi/include/64/  -I/fs/home2/mitten/src/HP/fft/include 
INLINE = $(OFLAG)

#-----------------------------------------------------------------------
# options for linking
#-----------------------------------------------------------------------
LINK    =  +FPD $(ARCH) +Ofaster

# use the veclib BLAS and the HP optimised LAPACK
LIB     =  -L../vasp.4.lib -ldmy ../vasp.4.lib/linpack_double.o -llapack  \
           -L/opt/mlib/lib/hpux64/lib/ -lveclib -lm

# presently the fft3dfurth is fastest
#FFT3D   = fftw3d.o  fft3dlib.o /fs/home2/mitten/src/HP/fft/lib/libfftw3.a
FFT3D   = fft3dfurth.o fft3dlib.o

#=======================================================================
# MPI version:
# we recommend to use HPUX supplied mpif90 frontend
# --------------------------------------------------
#=======================================================================
#FC=mpif90
#FCL=mpif90
#
#CPPFLG=  +cpp=yes -DHOST=\"HPUX Itanium2\" \
#     -Dkind8 -DMPI -DNGZhalf -DCACHE_SIZE=16000
#
#FFLAGS=   $(CPPFLG) $(ARCH) 
#
#FFT3D   = fftmpi.o fftmpi_map.o fft3dlib.o

#-----------------------------------------------------------------------
# general rules and compile lines
#-----------------------------------------------------------------------
BASIC=   symmetry.o symlib.o   lattlib.o  random.o   

SOURCE=  base.o     mpi.o      smart_allocate.o      xml.o  \
         constant.o jacobi.o   main_mpi.o  scala.o   \
         asa.o      lattice.o  poscar.o   ini.o      setex.o     radial.o  \
         pseudo.o   mgrid.o    mkpoints.o wave.o      wave_mpi.o  $(BASIC) \
         nonl.o     nonlr.o    dfast.o    choleski2.o    \
         mix.o      charge.o   xcgrad.o   xcspin.o    potex1.o   potex2.o  \
         metagga.o  constrmag.o pot.o      cl_shift.o force.o    dos.o      elf.o      \
         tet.o      hamil.o    steep.o    \
         chain.o    dyna.o     relativistic.o LDApU.o sphpro.o  paw.o   us.o \
         ebs.o      wavpre.o   wavpre_noio.o broyden.o \
         dynbr.o    rmm-diis.o reader.o   writer.o   tutor.o xml_writer.o \
         brent.o    stufak.o   fileio.o   opergrid.o stepver.o  \
         dipol.o    xclib.o    chgloc.o   subrot.o   optreal.o   davidson.o \
         edtest.o   electron.o shm.o      pardens.o  paircorrection.o \
         optics.o   constr_cell_relax.o   stm.o    finite_diff.o \
         elpol.o    setlocalpp.o 
 
INC=

vasp: $(SOURCE) $(FFT3D) $(INC) main.o 
	rm -f vasp
	$(FCL) -o vasp $(LINK) main.o  $(SOURCE)   $(FFT3D) $(LIB) 
makeparam: $(SOURCE) $(FFT3D) makeparam.o main.F $(INC)
	$(FCL) -o makeparam  $(LINK) makeparam.o $(SOURCE) $(FFT3D) $(LIB)
zgemmtest: zgemmtest.o base.o random.o $(INC)
	$(FCL) -o zgemmtest $(LINK) zgemmtest.o random.o base.o $(LIB)
dgemmtest: dgemmtest.o base.o random.o $(INC)
	$(FCL) -o dgemmtest $(LINK) dgemmtest.o random.o base.o $(LIB) 
ffttest: base.o smart_allocate.o mpi.o mgrid.o random.o ffttest.o $(FFT3D) $(INC)
	$(FCL) -o ffttest $(LINK) ffttest.o mpi.o mgrid.o random.o smart_allocate.o base.o $(FFT3D) $(LIB)
kpoints: $(SOURCE) $(FFT3D) makekpoints.o main.F $(INC)
	$(FCL) -o kpoints $(LINK) makekpoints.o $(SOURCE) $(FFT3D) $(LIB)

clean:	
	-rm -f *.g *.f *.o *.L *.mod ; touch *.F

main.o: main$(SUFFIX)
	$(FC) $(FFLAGS)$(DEBUG)  $(INCS) -c main$(SUFFIX)
xcgrad.o: xcgrad$(SUFFIX)
	$(FC) $(FFLAGS) $(INLINE)  $(INCS) -c xcgrad$(SUFFIX)
xcspin.o: xcspin$(SUFFIX)
	$(FC) $(FFLAGS) $(INLINE)  $(INCS) -c xcspin$(SUFFIX)

makeparam.o: makeparam$(SUFFIX)
	$(FC) $(FFLAGS)$(DEBUG)  $(INCS) -c makeparam$(SUFFIX)

makeparam$(SUFFIX): makeparam.F main.F 
#
# MIND: I do not have a full dependency list for the include
# and MODULES: here are only the minimal basic dependencies
# if one strucuture is changed then touch_dep must be called
# with the corresponding name of the structure
#
base.o: base.inc base.F
mgrid.o: mgrid.inc mgrid.F
constant.o: constant.inc constant.F
lattice.o: lattice.inc lattice.F
setex.o: setexm.inc setex.F
pseudo.o: pseudo.inc pseudo.F
poscar.o: poscar.inc poscar.F
mkpoints.o: mkpoints.inc mkpoints.F
wave.o: wave.inc wave.F
nonl.o: nonl.inc nonl.F
nonlr.o: nonlr.inc nonlr.F

$(OBJ_HIGH):
	$(CPP)
	$(FC) $(FFLAGS) $(OFLAG_HIGH) $(INCS) -c $*$(SUFFIX)
$(OBJ_NOOPT):
	$(CPP)
	$(FC) $(FFLAGS) $(INCS) -c $*$(SUFFIX)

fft3dlib_f77.o: fft3dlib_f77.F
	$(CPP)
	$(F77) $(FFLAGS_F77) -c $*$(SUFFIX)

.F.o:
	$(CPP)
	$(FC) $(FFLAGS) $(OFLAG) $(INCS) -c $*$(SUFFIX)
.F$(SUFFIX):
	$(CPP)
$(SUFFIX).o:
	$(FC) $(FFLAGS) $(OFLAG) $(INCS) -c $*$(SUFFIX)

