.SUFFIXES: .inc .f .F
#-----------------------------------------------------------------------
# Makefile for COMPAQ ALPHA
# =========================
# DEC f90 V5.0-492 compiles the code
# DEC f90 v5.1 definitely fails to compile the code (no bugfix available)
# Compaq f90 v5.2 reportedly compiles the code without problems
#    after the following patches are applied
#    http://ftp.service.digital.com/public/Readmes/unix/dfa521.README
# Compaq f90 V5.3       no information available
# Compaq f90 V5.4A-1472 compiles correctly
# Compaq Fortran X5.4A-1684 copiles correctly
# Compaq Fortran V5.5-1877-48BBF compiles correctly
#
# before compilation the minimum data seg size must be set to 140000
# this can be set by typing
#   ulimit -d 140000  (ksh, bash)
#   limit datasize 140000 (csh)
# on most installations the default seems to be around 130000,
# which is not sufficient for compilation of main.F.
#
# the optimal CACHE_SIZE depends on the processor type
# for SX, LX, DS20, DS20e  3000 seems to be best
#
#-----------------------------------------------------------------------

# all CPP processed fortran files have the extension .f 
SUFFIX=.f

#-----------------------------------------------------------------------
# fortran compiler and linker us $(FC) allready set
#-----------------------------------------------------------------------
FC=f90
FCL=$(FC)

#-----------------------------------------------------------------------
# possible options for CPP:
# NGXhalf               charge density   reduced in X direction
# wNGXhalf              gamma point only reduced in X direction
# avoidalloc            avoid ALLOCATE if possible
# PGF90                 work around some PGF90 bugs
# CACHE_SIZE            1000 for PII,PIII, 2000 for Athlon
#-----------------------------------------------------------------------

CPP     = ./preprocess <$*.F | /usr/lib/cpp -C -P -DHOST=\"True64\" \
   -Dkind8 -DNGXhalf \
   -DCACHE_SIZE=3000 >$*.f

#-----------------------------------------------------------------------
# general fortran flags  (there must a trailing blank on this line)
#-----------------------------------------------------------------------

FFLAGS =  -free -assume byterecl 

#-----------------------------------------------------------------------
# optimization
# you can play a little bit here
# in particular fft3dlib.F and rmm-diis.F  can benefit from better
# optimisation (we found no improvements ...)
#-----------------------------------------------------------------------

OFLAG  = -fast -arch host -tune host
OFLAG_HIGH = -fast -arch host -tune host
OBJ_HIGH = fft3dlib.o
OBJ_NOOPT = none
DEBUG  = -g -O0
INLINE = $(OFLAG) -inline all -assume noaccuracy_sensitive

#-----------------------------------------------------------------------
# options for linking
# you might want to use  LINK    = -non_shared 
# to created statically linked executables
#-----------------------------------------------------------------------

LINK    = 
#LINK    = -non_shared
BLAS    = -lcxml
LIB     = -L../vasp.4.lib -ldmy ../vasp.4.lib/linpack_double.o $(BLAS)
FFT3D   = fft3dfurth.o fft3dlib.o

#=======================================================================
# MPI version:
# we recommend to use COMPAQ MPI V1.96:
# --------------------------------------
# it is certainly fastest in terms of latency and bandwidth.
# in that case, -DMPI_BLOCK=4000 in the
# CPP line improves the performance a little bit
#
# alternatively lam.6.5.X can be used (http://www.lam-mpi.org/)
# and compiled with the following flags 
#
#  ./configure  -prefix /usr/local/lam-6.5.X --with-cflags=-O \
# -with-fc=f90 --with-f77flags=-O --without-romio --with-rpi=sysv \
# --without-cxx
#
#   please do not forget to copy mpif.h to the current directory
#   before executing make (i.e. cp /usr/local/lam/include/mpif.h . )
#   if LAM is used
#
#=======================================================================
#-----------------------------------------------------------------------
# additional options for CPP in parallel version (see also above):
# NGZhalf               charge density   reduced in Z direction
# wNGZhalf              gamma point only reduced in Z direction
# scaLAPACK             use scaLAPACK (usually slower)
#-----------------------------------------------------------------------

#CPP     = ./preprocess <$*.F | /usr/lib/cpp -C -P -DHOST=\"True64\" \
#    -Dkind8 -DNGZhalf \
#    -DCACHE_SIZE=3000 -DMPI >$*.f

#-----------------------------------------------------------------------
# location of SCALAPACK (mpi version)
# presently SCA is zeroed at the end, and hence SCALAPACK is not used
#-----------------------------------------------------------------------
BLACS=/usr/local/BLACS_lam
SCA_= /usr/local/SCALAPACK_lam

SCA= $(SCA_)/scalapack_LINUX.a $(SCA_)/pblas_LINUX.a $(SCA_)/tools_LINUX.a \
 $(BLACS)/LIB/blacsF77init_MPI-LINUX-0.a $(BLACS)/LIB/blacs_MPI-LINUX-0.a $(BLACS)/LIB/blacsF77init_MPI-LINUX-0.a

SCA=

#-----------------------------------------------------------------------
# libraries for mpi version
#-----------------------------------------------------------------------

### following two lines are for LAM
#LIB     = -L../vasp.4.lib -ldmy ../vasp.4.lib/linpack_double.o \
#     $(SCA) $(BLAS)
#FCL = mpif77 -non_shared

### following lines are for COMPAQ MPI  V1.96
#LIB     = -L../vasp.4.lib -ldmy ../vasp.4.lib/linpack_double.o \
#     $(SCA) $(BLAS)  -lmpi -lrt -lpthread

#FFT3D   = fftmpi.o fftmpi_map.o  fft3dlib.o 

#-----------------------------------------------------------------------
# general rules and compile lines
#-----------------------------------------------------------------------
BASIC=   symmetry.o symlib.o   lattlib.o  random.o   

SOURCE=  base.o     mpi.o      smart_allocate.o      xml.o  \
         constant.o jacobi.o   main_mpi.o  scala.o   \
         asa.o      lattice.o  poscar.o   ini.o      setex.o     radial.o  \
         pseudo.o   mgrid.o    mkpoints.o wave.o      wave_mpi.o  $(BASIC) \
         nonl.o     nonlr.o    dfast.o    choleski2.o    \
         mix.o      charge.o   xcgrad.o   xcspin.o    potex1.o   potex2.o  \
         metagga.o  constrmag.o pot.o      cl_shift.o force.o    dos.o      elf.o      \
         tet.o      hamil.o    steep.o    \
         chain.o    dyna.o     relativistic.o LDApU.o sphpro.o  paw.o   us.o \
         ebs.o      wavpre.o   wavpre_noio.o broyden.o \
         dynbr.o    rmm-diis.o reader.o   writer.o   tutor.o xml_writer.o \
         brent.o    stufak.o   fileio.o   opergrid.o stepver.o  \
         dipol.o    xclib.o    chgloc.o   subrot.o   optreal.o   davidson.o \
         edtest.o   electron.o shm.o      pardens.o  paircorrection.o \
         optics.o   constr_cell_relax.o   stm.o    finite_diff.o \
         elpol.o    setlocalpp.o 
 
INC=

vasp: $(SOURCE) $(FFT3D) $(INC) main.o 
	rm -f vasp
	$(FCL) -o vasp $(LINK) main.o  $(SOURCE)   $(FFT3D) $(LIB) 
makeparam: $(SOURCE) $(FFT3D) makeparam.o main.F $(INC)
	$(FCL) -o makeparam  $(LINK) makeparam.o $(SOURCE) $(FFT3D) $(LIB)
zgemmtest: zgemmtest.o base.o random.o $(INC)
	$(FCL) -o zgemmtest $(LINK) zgemmtest.o random.o base.o $(LIB)
dgemmtest: dgemmtest.o base.o random.o $(INC)
	$(FCL) -o dgemmtest $(LINK) dgemmtest.o random.o base.o $(LIB) 
ffttest: base.o smart_allocate.o mpi.o mgrid.o random.o ffttest.o $(FFT3D) $(INC)
	$(FCL) -o ffttest $(LINK) ffttest.o mpi.o mgrid.o random.o smart_allocate.o base.o $(FFT3D) $(LIB)
kpoints: $(SOURCE) $(FFT3D) makekpoints.o main.F $(INC)
	$(FCL) -o kpoints $(LINK) makekpoints.o $(SOURCE) $(FFT3D) $(LIB)

clean:	
	-rm -f *.g *.f *.o *.L *.mod ; touch *.F

main.o: main$(SUFFIX)
	$(FC) $(FFLAGS)$(DEBUG)  $(INCS) -c main$(SUFFIX)
xcgrad.o: xcgrad$(SUFFIX)
	$(FC) $(FFLAGS) $(INLINE)  $(INCS) -c xcgrad$(SUFFIX)
xcspin.o: xcspin$(SUFFIX)
	$(FC) $(FFLAGS) $(INLINE)  $(INCS) -c xcspin$(SUFFIX)

makeparam.o: makeparam$(SUFFIX)
	$(FC) $(FFLAGS)$(DEBUG)  $(INCS) -c makeparam$(SUFFIX)

makeparam$(SUFFIX): makeparam.F main.F 
#
# MIND: I do not have a full dependency list for the include
# and MODULES: here are only the minimal basic dependencies
# if one strucuture is changed then touch_dep must be called
# with the corresponding name of the structure
#
base.o: base.inc base.F
mgrid.o: mgrid.inc mgrid.F
constant.o: constant.inc constant.F
lattice.o: lattice.inc lattice.F
setex.o: setexm.inc setex.F
pseudo.o: pseudo.inc pseudo.F
poscar.o: poscar.inc poscar.F
mkpoints.o: mkpoints.inc mkpoints.F
wave.o: wave.inc wave.F
nonl.o: nonl.inc nonl.F
nonlr.o: nonlr.inc nonlr.F

$(OBJ_HIGH):
	$(CPP)
	$(FC) $(FFLAGS) $(OFLAG_HIGH) $(INCS) -c $*$(SUFFIX)
$(OBJ_NOOPT):
	$(CPP)
	$(FC) $(FFLAGS) $(INCS) -c $*$(SUFFIX)

fft3dlib_f77.o: fft3dlib_f77.F
	$(CPP)
	$(F77) $(FFLAGS_F77) -c $*$(SUFFIX)

.F.o:
	$(CPP)
	$(FC) $(FFLAGS) $(OFLAG) $(INCS) -c $*$(SUFFIX)
.F$(SUFFIX):
	$(CPP)
$(SUFFIX).o:
	$(FC) $(FFLAGS) $(OFLAG) $(INCS) -c $*$(SUFFIX)

