.SUFFIXES: .inc .f .F
#-----------------------------------------------------------------------
# Makefile for SGI: 
# updated version uses preprocess to move ccp preprocessor directives
# to first column
# On some platforms (O2 for instance) -64 MUST be changed to
# -n32. On those machines, tests indicate that performance improves,
# if -DCACHE_SIZE=4000 is changed to -DCACHE_SIZE=0.
# for the Origin 2000 and Origin 3000 the makefile should work
# as supplied.
#
# The present version of the makefile uses only -O2,
# since fft3dlib (and some other routines in the parallel version) do 
# not compile correctly under some MIPSpro compilers
# with higher optimisation
# (e.g. MIPSpro Compilers: Version 7.3.1.2m)
# You might try to increase the optimisation to -O3.
# Versions 7.2. used to work with -O3 for instance.
#
# This makefile defines -Dpro_loop, which means that DO LOOPS instead
# of DGEMMV are used in nonlr.F and nonl.F. At least on the SGI
# Origin this improves the performance by 30 % in the relevant routines.
#
# attention:
# ==========
# MIPs Fortran 90 V. 7.3 has a bug, which does not allow one to
# compile fft3dlib.F at optimisation -O2.
# When  you compile fft3dlib.F you have to switch to optimisation -O1
#
#-----------------------------------------------------------------------

# all CPP processed fortran files have the extension .f 
SUFFIX=.f

#-----------------------------------------------------------------------
# fortran compiler  $(FC) allready set
#-----------------------------------------------------------------------
FC= f90 -freeform
FCL=$(FC)

#-----------------------------------------------------------------------
# possible options for CPP:
# NGXhalf            charge density   reduced in X direction
# wNGXhalf           gamma point only reduced in X direction
# pro_loop           uses DO loops instead of DGEMV on SGI
#                    since it is faster     
# we use cc -P instead of cpp since on the SGI cpp seems to be corrupt
#-----------------------------------------------------------------------
CPP     = ./preprocess <$*.F >$*.f90 ; cc -P -DHOST=\"SGI\" \
          -DNGXhalf -Dkind8 \
          -DCACHE_SIZE=4000 -Dpro_loop $*.f90   ; mv $*.i $*.f

#-----------------------------------------------------------------------
# general fortran flags  (there must a trailing blank on this line)
#-----------------------------------------------------------------------
FFLAGS =  -nocpp -mips4 -64 

#-----------------------------------------------------------------------
# optimization
# presently only O2 since vasp crashes for higher optimisation level
#-----------------------------------------------------------------------
OFLAG  = -O2
# you might try the following line as well,
# works reportedly under MIPSpro.7.4.0.0
#OFLAG  = -Ofast -OPT:roundoff=1
OFLAG_HIGH = $(OFLAG)
OBJ_HIGH = none
OBJ_NOOPT = none
DEBUG  = -g
INLINE = -sopt,-inline,-ind=10 -listing $(OFLAG)


#-----------------------------------------------------------------------
# options for linking
#-----------------------------------------------------------------------

LINK    = -mips4 -64 
# MIPSpro.7.4.0.0
#LINK    = -mips4 -64 -IPA
LIB     = -L../vasp.4.lib -ldmy -lblas  ../vasp.4.lib/linpack_double.o  \
           ../vasp.4.lib/lapack_double.o -lblas
FFT3D   = fft3dfurth.o fft3dlib.o

#-----------------------------------------------------------------------
# MPI section,  uncomment the following lines
#-----------------------------------------------------------------------

#-----------------------------------------------------------------------
# additional options for CPP in parallel version (see also above):
# NGZhalf               charge density   reduced in Z direction
# wNGZhalf              gamma point only reduced in Z direction
# scaLAPACK             use scaLAPACK (no experience on SGI)
# use_collective        use collective MPI calls (probably faster ?)
#-----------------------------------------------------------------------

#CPP     = ./preprocess <$*.F >$*.f90 ; cc -P -DHOST=\"SGI\" \
#           -DNGZhalf -Dkind8 -DMPI -Duse_collective \
#           -DCACHE_SIZE=4000 -Dpro_loop $*.f90   ; mv $*.i $*.f
#LIB     = -L../vasp.4.lib -lmpi -ldmy -lblas  ../vasp.4.lib/linpack_double.o  ../vasp.4.lib/lapack_double.o -lblas -lmpi
#FFT3D   = fftmpi.o fftmpi_map.o fft3dlib.o


#-----------------------------------------------------------------------
# general rules and compile lines
#-----------------------------------------------------------------------
BASIC=   symmetry.o symlib.o   lattlib.o  random.o   

SOURCE=  base.o     mpi.o      smart_allocate.o      xml.o  \
         constant.o jacobi.o   main_mpi.o  scala.o   \
         asa.o      lattice.o  poscar.o   ini.o      setex.o     radial.o  \
         pseudo.o   mgrid.o    mkpoints.o wave.o      wave_mpi.o  $(BASIC) \
         nonl.o     nonlr.o    dfast.o    choleski2.o    \
         mix.o      charge.o   xcgrad.o   xcspin.o    potex1.o   potex2.o  \
         metagga.o  constrmag.o pot.o      cl_shift.o force.o    dos.o      elf.o      \
         tet.o      hamil.o    steep.o    \
         chain.o    dyna.o     relativistic.o LDApU.o sphpro.o  paw.o   us.o \
         ebs.o      wavpre.o   wavpre_noio.o broyden.o \
         dynbr.o    rmm-diis.o reader.o   writer.o   tutor.o xml_writer.o \
         brent.o    stufak.o   fileio.o   opergrid.o stepver.o  \
         dipol.o    xclib.o    chgloc.o   subrot.o   optreal.o   davidson.o \
         edtest.o   electron.o shm.o      pardens.o  paircorrection.o \
         optics.o   constr_cell_relax.o   stm.o    finite_diff.o \
         elpol.o    setlocalpp.o 
 
INC=

vasp: $(SOURCE) $(FFT3D) $(INC) main.o 
	rm -f vasp
	$(FCL) -o vasp $(LINK) main.o  $(SOURCE)   $(FFT3D) $(LIB) 
makeparam: $(SOURCE) $(FFT3D) makeparam.o main.F $(INC)
	$(FCL) -o makeparam  $(LINK) makeparam.o $(SOURCE) $(FFT3D) $(LIB)
zgemmtest: zgemmtest.o base.o random.o $(INC)
	$(FCL) -o zgemmtest $(LINK) zgemmtest.o random.o base.o $(LIB)
dgemmtest: dgemmtest.o base.o random.o $(INC)
	$(FCL) -o dgemmtest $(LINK) dgemmtest.o random.o base.o $(LIB) 
ffttest: base.o smart_allocate.o mpi.o mgrid.o random.o ffttest.o $(FFT3D) $(INC)
	$(FCL) -o ffttest $(LINK) ffttest.o mpi.o mgrid.o random.o smart_allocate.o base.o $(FFT3D) $(LIB)
kpoints: $(SOURCE) $(FFT3D) makekpoints.o main.F $(INC)
	$(FCL) -o kpoints $(LINK) makekpoints.o $(SOURCE) $(FFT3D) $(LIB)

clean:	
	-rm -f *.g *.f *.o *.L *.mod ; touch *.F

main.o: main$(SUFFIX)
	$(FC) $(FFLAGS)$(DEBUG)  $(INCS) -c main$(SUFFIX)
xcgrad.o: xcgrad$(SUFFIX)
	$(FC) $(FFLAGS) $(INLINE)  $(INCS) -c xcgrad$(SUFFIX)
xcspin.o: xcspin$(SUFFIX)
	$(FC) $(FFLAGS) $(INLINE)  $(INCS) -c xcspin$(SUFFIX)

makeparam.o: makeparam$(SUFFIX)
	$(FC) $(FFLAGS)$(DEBUG)  $(INCS) -c makeparam$(SUFFIX)

makeparam$(SUFFIX): makeparam.F main.F 
#
# MIND: I do not have a full dependency list for the include
# and MODULES: here are only the minimal basic dependencies
# if one strucuture is changed then touch_dep must be called
# with the corresponding name of the structure
#
base.o: base.inc base.F
mgrid.o: mgrid.inc mgrid.F
constant.o: constant.inc constant.F
lattice.o: lattice.inc lattice.F
setex.o: setexm.inc setex.F
pseudo.o: pseudo.inc pseudo.F
poscar.o: poscar.inc poscar.F
mkpoints.o: mkpoints.inc mkpoints.F
wave.o: wave.inc wave.F
nonl.o: nonl.inc nonl.F
nonlr.o: nonlr.inc nonlr.F

$(OBJ_HIGH):
	$(CPP)
	$(FC) $(FFLAGS) $(OFLAG_HIGH) $(INCS) -c $*$(SUFFIX)
$(OBJ_NOOPT):
	$(CPP)
	$(FC) $(FFLAGS) $(INCS) -c $*$(SUFFIX)

fft3dlib_f77.o: fft3dlib_f77.F
	$(CPP)
	$(F77) $(FFLAGS_F77) -c $*$(SUFFIX)

.F.o:
	$(CPP)
	$(FC) $(FFLAGS) $(OFLAG) $(INCS) -c $*$(SUFFIX)
.F$(SUFFIX):
	$(CPP)
$(SUFFIX).o:
	$(FC) $(FFLAGS) $(OFLAG) $(INCS) -c $*$(SUFFIX)

