#!/bin/bash
# ------------------------------------------
# Function: 
# Script for running gen-generated serial jobs.
# Usage:
# 1. Edit the vasp_command, which is basically how you'd run vasp once, by uncommenting the appropriate line. # Good for saving work, bad for module-based.
# 2. Run gen_vasp
# History:
# 2017/02/24 Xiang: updated description.
# ------------------------------------------

## run flags ##
#vasp_command="mpiexec.hydra -n 20 /home/xzhang1/src/vasp.5.4.1/bin/vasp_std"
#vasp_command="mpiexec.hydra -n 20 /home/xzhang1/src/vasp.5.4.1/bin/vasp_gam"
vasp_command="mpiexec.hydra -n 20 /home/xzhang1/src/vasp.5.4.1/bin/vasp_ncl"
#vasp_command="mpiexec.hydra -n 20 /home/xzhang1/src/vasp.5.4.1/bin/vasp_gpu"
gen_log_dir="${PWD}"

## reporting mechanisms ##
report_end() {
  mail -s "VASP job finished: {$vasp_caller}|{${PWD##*/}}" 8576361405@vtext.com <<< EOM
}
trap report_end EXIT

## calculation ##
mkdir -p NOW
for p in `cat ${gen_log_dir}/gen.log`
do
 if [[ $p == \#* ]] ; then
  continue
 fi
 echo ${PWD} $p `date` 
 echo -------------------------------------
 rm -rf ./NOW/tag_*
 rm -rf vasprun.xml
 touch ./NOW/tag_${p}
 if [ ! -f ./NOW/POTCAR ]  ; then
  cp ./POTCAR ./NOW/POTCAR
 fi
 if [ ! -f ./NOW/POSCAR ] ; then
  cp ./POSCAR ./NOW/POSCAR
 fi
 if [ -f ./NOW/CONTCAR ] && [ -s ./NOW/CONTCAR ] ; then
  cp ./NOW/CONTCAR ./NOW/POSCAR
 fi
 cp INCAR-${p} ./NOW/INCAR
 cp KPOINTS-${p} ./NOW/KPOINTS
 cd ./NOW/
 ## vasp it!
 eval ${vasp_command}
 if [[ `tail -1 vasprun.xml` != "</modeling>" ]] ; then
  report_end; exit 1
 fi
 cd ../
 ## end vasp it!
 cp -r ./NOW ${p}
 echo -------------------------------------
 echo ${PWD} $p OVER HERE `date`                                                                
 echo;echo
done
